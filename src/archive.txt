 int M = 2;
    int N = 2;
    int O = 0;
    int P = 0;

    /*
    char file1[256];
    char file2[256];
    
    printf("Please specify the name of the csv for the first matrix. \n");
    scanf("%255s", file1);
    getchar();
    printf("Please specify the name the csv file for the second matrix. \n");
    scanf("%255s", file2);
    getchar();
    printf("%s\n", file1);
*/
    /* Manual Setting of Matrix values
    gsl_matrix_set(A, 0, 0, 1);
    gsl_matrix_set(A, 0, 1, 2);
    gsl_matrix_set(A, 1, 0, 3);
    gsl_matrix_set(A, 1, 1, 4);

    gsl_matrix_set(B, 0, 0, 2);
    gsl_matrix_set(B, 0, 1, 4);
    gsl_matrix_set(B, 1, 0, 6);
    gsl_matrix_set(B, 1, 1, 8);
    */

    
    /* Patterned automatic setting of Matrix values
    for (int i = 0; i < M; i++ ){
        for (int j = 0; j < N; j++){
            gsl_matrix_set(A, i, j, value * parameter);
        }
    }b
    */
/*
    // File loading of Matrix Values.
    count_rows_cols(file1, &M, &N);
    count_rows_cols(file2, &O, &P);

    gsl_matrix *A = gsl_matrix_alloc(M,N);
    gsl_matrix *B = gsl_matrix_alloc(O,P);

    if( M == N && N == O && N == P){
        load_data(file1, A);
        load_data(file2, B);
    } else {
    //    printf("You must provide 2 square matrixes for this program as of now.\n");
    }
*/
/* 
    // Find the determinant.
    gsl_permutation *p = gsl_permutation_alloc(N);
    int s;
    gsl_linalg_LU_decomp(B, p, &s);
    double det = gsl_linalg_LU_det(B, s);
*/
   // printf( "The determinant is: %g\n", det);

 
/*
    // Find the eigenvalues and eigenvectors of B
    if(M == N && N == O && N == P ){
        gsl_vector *eval = gsl_vector_alloc(N);
        gsl_matrix *evec = gsl_matrix_alloc(N, N);

        gsl_eigen_symmv_workspace *w = gsl_eigen_symmv_alloc(N);
        gsl_eigen_symmv(B, eval, evec, w);

        gsl_eigen_symmv_free(w);
   */ 
/*
    // Output of eigenvalues and eigenvectors
        for(int i = 0; i < N; i++){
            double eigenvalue = gsl_vector_get(eval, i);
            gsl_vector_view eigenvector = gsl_matrix_column(evec, i);
            printf("Eigenvalue: %g\n", eigenvalue);
            printf("Eigenvector: \n");
            printf(" ( ");
            for (int j = 0; j < N; j++){
                if(j < N-1){
                printf("%g, ", gsl_vector_get(&eigenvector.vector, j));
                } else {
                printf("%g ", gsl_vector_get(&eigenvector.vector, j));
                }
            }
            printf(")\n");
        }
    } else {
        printf("The matrix is not symmetric and new functionality must be added to handle non-symmetric matrix. \n");
    }
*/